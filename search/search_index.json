{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Docktuna","text":"<p>Docktuna is a project template that enables Optuna, a hyperparameter tuning framework, to run with a PostgreSQL backend \u2014 all within a fully containerized Docker environment. It\u2019s designed to be a starting point for your own model tuning workflows, with GPU support, Conda + Poetry environments, secrets management, and automated testing.</p> <p>\ud83d\udcda Note: Most of the project documentation currently lives in the GitHub README. This site focuses on API reference material, with room to expand in the future.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>Use the navigation bar to browse automatically generated documentation for the <code>docktuna.optuna_db</code> module.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#optuna_dbdb_instance","title":"<code>optuna_db.db_instance</code>","text":"<p>options:   show_source: true</p>"},{"location":"api/#docktuna.optuna_db.db_instance.get_optuna_db","title":"<code>get_optuna_db()</code>","text":"<p>Returns a global OptunaDatabase instance, initializing it if necessary.</p> <p>If the database instance does not exist, it will be created using credentials stored in Docker secrets. If initialization fails, an exception is raised.</p> <p>Returns:</p> Type Description <code>OptunaDatabase</code> <p>The global OptunaDatabase instance.</p> <p>Raises:</p> Type Description <code>RuntimeError</code> <p>If the database initialization fails.</p> Source code in <code>src/docktuna/optuna_db/db_instance.py</code> <pre><code>def get_optuna_db() -&gt; OptunaDatabase:\n    \"\"\"\n    Returns a global OptunaDatabase instance, initializing it if necessary.\n\n    If the database instance does not exist, it will be created using credentials\n    stored in Docker secrets. If initialization fails, an exception is raised.\n\n    Returns:\n        The global OptunaDatabase instance.\n\n    Raises:\n        RuntimeError: If the database initialization fails.\n    \"\"\"\n    global OPTUNA_DB\n    if OPTUNA_DB is None:\n        dotenv_path = (\n            Path.home() / \"project\" / \"docker\" / \"optuna_db\" / \"optuna_db.env\"\n        )\n        load_dotenv(dotenv_path=dotenv_path)\n\n        OPTUNA_DB = OptunaDatabase(\n            username=getenv(\"OPTUNA_DB_USER\"),\n            db_password_secret=\"optuna_db_user_password\",\n            db_name=getenv(\"OPTUNA_DB_NAME\"),\n            hostname=getenv(\"OPTUNA_DB_HOST\"),\n        )\n        try:\n            _ = OPTUNA_DB.storage  # Force initialization to catch errors early\n        except Exception as e:\n            OPTUNA_DB = None  # Reset on failure\n            raise RuntimeError(f\"Failed to initialize Optuna database: {e}\")\n    return OPTUNA_DB\n</code></pre>"},{"location":"api/#optuna_dboptuna_dboptunadatabase","title":"<code>optuna_db.optuna_db.OptunaDatabase</code>","text":"<p>Handles database interactions for Optuna studies, including secure retrieval of credentials from Docker secrets and connection management.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>class OptunaDatabase:\n    \"\"\"\n    Handles database interactions for Optuna studies, including secure\n    retrieval of credentials from Docker secrets and connection management.\n    \"\"\"\n\n    def __init__(\n        self,\n        username: str,\n        db_password_secret: str,\n        db_name: str,\n        hostname: str,\n    ):\n        \"\"\"\n        Initializes an OptunaDatabase instance with database connection details.\n\n        Args:\n            username: Database username.\n            db_password_secret: Secret name for the database password.\n            db_name: Name of the database.\n            hostname: Database host.\n        \"\"\"\n        self._username = username\n        self._db_password_secret = db_password_secret\n        self._db_name = db_name\n        self._hostname = hostname\n\n    def _read_secret(self, secret_name: str) -&gt; str:\n        \"\"\"\n        Reads a secret value from the Docker secrets directory.\n\n        Args:\n            secret_name: The name of the secret file to read.\n\n        Returns:\n            The contents of the secret file.\n\n        Raises:\n            Exception: If the secret file is not found.\n        \"\"\"\n        secret_path = Path(\"/run/secrets\") / secret_name\n        try:\n            with secret_path.open(mode=\"r\") as f:\n                return f.read().strip()\n        except FileNotFoundError:\n            raise Exception(f\"Secret {secret_name} not found!\")\n\n    @property\n    def username(self) -&gt; str:\n        \"\"\"Retrieves the database username from secrets.\"\"\"\n        return self._username\n\n    @property\n    def db_name(self) -&gt; str:\n        \"\"\"Retrieves the database name from secrets.\"\"\"\n        return self._db_name\n\n    @property\n    def hostname(self) -&gt; str:\n        \"\"\"Retrieves the database hostname from secrets.\"\"\"\n        return self._hostname\n\n    @property\n    def _db_url(self) -&gt; str:\n        \"\"\"\n        Constructs a secure database connection URL dynamically\n        using credentials stored in Docker secrets.\n\n        Returns:\n            The formatted database connection URL.\n        \"\"\"\n        user = self._username\n        password = self._read_secret(self._db_password_secret)\n        db_name = self._db_name\n        host = self._hostname\n\n        return f\"postgresql+psycopg2://{user}:{quote(password, safe='')}@{host}/{db_name}\"\n\n    @property\n    def storage(self) -&gt; RDBStorage:\n        \"\"\"\n        Creates an Optuna RDBStorage instance for persistent study storage.\n\n        Returns:\n            The Optuna storage backend.\n        \"\"\"\n        return RDBStorage(url=self._db_url)\n\n    @property\n    def study_summaries(self) -&gt; list[optuna.study.StudySummary]:\n        \"\"\"\n        Retrieves summaries of all studies stored in the database.\n\n        Returns:\n            A list of study summaries.\n        \"\"\"\n        return optuna.study.get_all_study_summaries(storage=self.storage)\n\n    def is_in_db(self, study_name: str) -&gt; bool:\n        \"\"\"\n        Checks if a study exists in the database.\n\n        Args:\n            study_name: The name of the study.\n\n        Returns:\n            True if the study exists, False otherwise.\n        \"\"\"\n        return study_name in {\n            summary.study_name for summary in self.study_summaries\n        }\n\n    def get_study_summary(self, study_name: str) -&gt; optuna.study.StudySummary:\n        \"\"\"\n        Retrieves the summary of a specific study.\n\n        Args:\n            study_name: The name of the study.\n\n        Returns:\n            The summary of the study.\n\n        Raises:\n            StopIteration: If the study is not found.\n        \"\"\"\n        return next(\n            summary\n            for summary in self.study_summaries\n            if summary.study_name == study_name\n        )\n\n    def get_best_params(self, study_name: str) -&gt; dict[str, any]:\n        \"\"\"\n        Retrieves the best hyperparameters from a completed study.\n\n        Args:\n            study_name: The name of the study.\n\n        Returns:\n            The best hyperparameters, or an empty dictionary if no trials exist.\n        \"\"\"\n        study_summary = self.get_study_summary(study_name=study_name)\n        if study_summary is None or study_summary.best_trial is None:\n            return {}\n        return study_summary.best_trial.params\n\n    def get_study(self, study_name: str) -&gt; optuna.Study:\n        \"\"\"\n        Retrieves or creates an Optuna study.\n\n        Args:\n            study_name: The name of the study.\n\n        Returns:\n            The retrieved or newly created study.\n        \"\"\"\n        with temporary_optuna_verbosity(logging_level=optuna.logging.WARNING):\n            return optuna.create_study(\n                study_name=study_name,\n                storage=self.storage,\n                load_if_exists=True,\n            )\n\n    def get_all_studies(self) -&gt; list[optuna.Study]:\n        \"\"\"\n        Retrieves all studies stored in the database.\n\n        Returns:\n            A list of all Optuna studies.\n        \"\"\"\n        with temporary_optuna_verbosity(logging_level=optuna.logging.WARNING):\n            return [\n                self.get_study(study_name)\n                for study_name in {\n                    summary.study_name for summary in self.study_summaries\n                }\n            ]\n\n    @property\n    def num_existing_studies(self) -&gt; int:\n        \"\"\"\n        Returns the number of existing studies in the database.\n\n        Returns:\n            The total number of studies.\n        \"\"\"\n        return len(self.get_all_studies())\n\n    @staticmethod\n    def get_last_update_time(study: optuna.Study) -&gt; datetime.datetime:\n        \"\"\"\n        Retrieves the last update time of a given study.\n\n        Args:\n            study: The study object.\n\n        Returns:\n            The timestamp of the most recent trial completion,\n            or a default old date if no trials exist.\n        \"\"\"\n        trial_complete_times = [\n            trial.datetime_complete\n            for trial in study.trials\n            if trial.datetime_complete\n        ]\n        return (\n            max(trial_complete_times)\n            if trial_complete_times\n            else datetime.datetime(1, 1, 1)\n        )\n\n    def get_latest_study(self) -&gt; optuna.Study:\n        \"\"\"\n        Retrieves the most recently updated study.\n\n        Returns:\n            The study with the most recent completed trial,\n            or None if no studies exist.\n        \"\"\"\n        sorted_studies = sorted(\n            self.get_all_studies(),\n            key=lambda x: self.get_last_update_time(x),\n            reverse=True,\n        )\n        return sorted_studies[0] if sorted_studies else None\n</code></pre> <p>options:   show_source: true</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.db_name","title":"<code>db_name</code>  <code>property</code>","text":"<p>Retrieves the database name from secrets.</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.hostname","title":"<code>hostname</code>  <code>property</code>","text":"<p>Retrieves the database hostname from secrets.</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.num_existing_studies","title":"<code>num_existing_studies</code>  <code>property</code>","text":"<p>Returns the number of existing studies in the database.</p> <p>Returns:</p> Type Description <code>int</code> <p>The total number of studies.</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.storage","title":"<code>storage</code>  <code>property</code>","text":"<p>Creates an Optuna RDBStorage instance for persistent study storage.</p> <p>Returns:</p> Type Description <code>RDBStorage</code> <p>The Optuna storage backend.</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.study_summaries","title":"<code>study_summaries</code>  <code>property</code>","text":"<p>Retrieves summaries of all studies stored in the database.</p> <p>Returns:</p> Type Description <code>list[StudySummary]</code> <p>A list of study summaries.</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.username","title":"<code>username</code>  <code>property</code>","text":"<p>Retrieves the database username from secrets.</p>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.__init__","title":"<code>__init__(username, db_password_secret, db_name, hostname)</code>","text":"<p>Initializes an OptunaDatabase instance with database connection details.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>Database username.</p> required <code>db_password_secret</code> <code>str</code> <p>Secret name for the database password.</p> required <code>db_name</code> <code>str</code> <p>Name of the database.</p> required <code>hostname</code> <code>str</code> <p>Database host.</p> required Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def __init__(\n    self,\n    username: str,\n    db_password_secret: str,\n    db_name: str,\n    hostname: str,\n):\n    \"\"\"\n    Initializes an OptunaDatabase instance with database connection details.\n\n    Args:\n        username: Database username.\n        db_password_secret: Secret name for the database password.\n        db_name: Name of the database.\n        hostname: Database host.\n    \"\"\"\n    self._username = username\n    self._db_password_secret = db_password_secret\n    self._db_name = db_name\n    self._hostname = hostname\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.get_all_studies","title":"<code>get_all_studies()</code>","text":"<p>Retrieves all studies stored in the database.</p> <p>Returns:</p> Type Description <code>list[Study]</code> <p>A list of all Optuna studies.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def get_all_studies(self) -&gt; list[optuna.Study]:\n    \"\"\"\n    Retrieves all studies stored in the database.\n\n    Returns:\n        A list of all Optuna studies.\n    \"\"\"\n    with temporary_optuna_verbosity(logging_level=optuna.logging.WARNING):\n        return [\n            self.get_study(study_name)\n            for study_name in {\n                summary.study_name for summary in self.study_summaries\n            }\n        ]\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.get_best_params","title":"<code>get_best_params(study_name)</code>","text":"<p>Retrieves the best hyperparameters from a completed study.</p> <p>Parameters:</p> Name Type Description Default <code>study_name</code> <code>str</code> <p>The name of the study.</p> required <p>Returns:</p> Type Description <code>dict[str, any]</code> <p>The best hyperparameters, or an empty dictionary if no trials exist.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def get_best_params(self, study_name: str) -&gt; dict[str, any]:\n    \"\"\"\n    Retrieves the best hyperparameters from a completed study.\n\n    Args:\n        study_name: The name of the study.\n\n    Returns:\n        The best hyperparameters, or an empty dictionary if no trials exist.\n    \"\"\"\n    study_summary = self.get_study_summary(study_name=study_name)\n    if study_summary is None or study_summary.best_trial is None:\n        return {}\n    return study_summary.best_trial.params\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.get_last_update_time","title":"<code>get_last_update_time(study)</code>  <code>staticmethod</code>","text":"<p>Retrieves the last update time of a given study.</p> <p>Parameters:</p> Name Type Description Default <code>study</code> <code>Study</code> <p>The study object.</p> required <p>Returns:</p> Type Description <code>datetime</code> <p>The timestamp of the most recent trial completion,</p> <code>datetime</code> <p>or a default old date if no trials exist.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>@staticmethod\ndef get_last_update_time(study: optuna.Study) -&gt; datetime.datetime:\n    \"\"\"\n    Retrieves the last update time of a given study.\n\n    Args:\n        study: The study object.\n\n    Returns:\n        The timestamp of the most recent trial completion,\n        or a default old date if no trials exist.\n    \"\"\"\n    trial_complete_times = [\n        trial.datetime_complete\n        for trial in study.trials\n        if trial.datetime_complete\n    ]\n    return (\n        max(trial_complete_times)\n        if trial_complete_times\n        else datetime.datetime(1, 1, 1)\n    )\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.get_latest_study","title":"<code>get_latest_study()</code>","text":"<p>Retrieves the most recently updated study.</p> <p>Returns:</p> Type Description <code>Study</code> <p>The study with the most recent completed trial,</p> <code>Study</code> <p>or None if no studies exist.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def get_latest_study(self) -&gt; optuna.Study:\n    \"\"\"\n    Retrieves the most recently updated study.\n\n    Returns:\n        The study with the most recent completed trial,\n        or None if no studies exist.\n    \"\"\"\n    sorted_studies = sorted(\n        self.get_all_studies(),\n        key=lambda x: self.get_last_update_time(x),\n        reverse=True,\n    )\n    return sorted_studies[0] if sorted_studies else None\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.get_study","title":"<code>get_study(study_name)</code>","text":"<p>Retrieves or creates an Optuna study.</p> <p>Parameters:</p> Name Type Description Default <code>study_name</code> <code>str</code> <p>The name of the study.</p> required <p>Returns:</p> Type Description <code>Study</code> <p>The retrieved or newly created study.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def get_study(self, study_name: str) -&gt; optuna.Study:\n    \"\"\"\n    Retrieves or creates an Optuna study.\n\n    Args:\n        study_name: The name of the study.\n\n    Returns:\n        The retrieved or newly created study.\n    \"\"\"\n    with temporary_optuna_verbosity(logging_level=optuna.logging.WARNING):\n        return optuna.create_study(\n            study_name=study_name,\n            storage=self.storage,\n            load_if_exists=True,\n        )\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.get_study_summary","title":"<code>get_study_summary(study_name)</code>","text":"<p>Retrieves the summary of a specific study.</p> <p>Parameters:</p> Name Type Description Default <code>study_name</code> <code>str</code> <p>The name of the study.</p> required <p>Returns:</p> Type Description <code>StudySummary</code> <p>The summary of the study.</p> <p>Raises:</p> Type Description <code>StopIteration</code> <p>If the study is not found.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def get_study_summary(self, study_name: str) -&gt; optuna.study.StudySummary:\n    \"\"\"\n    Retrieves the summary of a specific study.\n\n    Args:\n        study_name: The name of the study.\n\n    Returns:\n        The summary of the study.\n\n    Raises:\n        StopIteration: If the study is not found.\n    \"\"\"\n    return next(\n        summary\n        for summary in self.study_summaries\n        if summary.study_name == study_name\n    )\n</code></pre>"},{"location":"api/#docktuna.optuna_db.optuna_db.OptunaDatabase.is_in_db","title":"<code>is_in_db(study_name)</code>","text":"<p>Checks if a study exists in the database.</p> <p>Parameters:</p> Name Type Description Default <code>study_name</code> <code>str</code> <p>The name of the study.</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if the study exists, False otherwise.</p> Source code in <code>src/docktuna/optuna_db/optuna_db.py</code> <pre><code>def is_in_db(self, study_name: str) -&gt; bool:\n    \"\"\"\n    Checks if a study exists in the database.\n\n    Args:\n        study_name: The name of the study.\n\n    Returns:\n        True if the study exists, False otherwise.\n    \"\"\"\n    return study_name in {\n        summary.study_name for summary in self.study_summaries\n    }\n</code></pre>"}]}